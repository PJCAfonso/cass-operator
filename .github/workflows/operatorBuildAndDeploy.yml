name: Cass Operator Build & Deploy
on:
  push:
    branches: [ master, multiarch-pr ]
  pull_request:
    branches: [ master ]
jobs:
  build_operator_docker:
    name: Build Cass Operator Docker Image
    runs-on: ubuntu-latest
    env:
      GOPATH: /home/runner/go
      GOROOT: /usr/local/go1.13
    steps:
      - uses: actions/checkout@v2
        if: github.event_name == 'pull_request'
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/checkout@v2
        if: github.event_name != 'pull_request'
      - name: Set up Go 1.13
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
      - name: Install Mage
        run: |
          cd /tmp
          wget https://github.com/magefile/mage/releases/download/v1.9.0/mage_1.9.0_Linux-64bit.tar.gz
          tar -xvf mage_1.9.0_Linux-64bit.tar.gz
          mkdir -p $GOPATH/bin
          mv mage $GOPATH/bin/mage
          sudo chmod +x $GOPATH/bin/mage
      - name: Test Sdk Generate
        run: |
          export PATH=$GOROOT/bin:$GOPATH/bin:$PATH
          mage operator:testSdkGenerate
      - name: Test Client Generate
        run: |
          export PATH=$GOROOT/bin:$GOPATH/bin:$PATH
          mage operator:testGenerateClient
      - name: Unit Tests
        run: |
          export PATH=$GOROOT/bin:$GOPATH/bin:$PATH
          mage operator:testGo
      - name: Login to GitHub Package Registry
        run: echo "${{ secrets.JOHN_GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u "${{ github.actor }}" --password-stdin
      # - name: Login to ECR
      #   run: echo "${{ secrets.ECR_SECRET }}" | docker login "${{ secrets.ECR_REPO }}" -u "${{ secrets.ECR_ID }}" --password-stdin
      - name: Setup Buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v3
      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Build and Push Docker
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == 'datastax/cass-operator'
        # env:
        #   ECR_REPO: ${{ secrets.ECR_REPO }}
        run: |
          export PATH=$GOROOT/bin:$GOPATH/bin:$PATH
          GITHUB_REPO_URL="https://github.com/${{ github.repository }}"
          VERSION="$(mage operator:printVersion)"
          FULL_VERSION="$(mage operator:printFullVersion)"
          ECR_TAGS=()
          ECR_UBI_TAGS=()
          GH_TAGS=()
          GH_UBI_TAGS=()
          GH_ARM64_TAGS=()

          echo "Repository owner: "

          for t in "${FULL_VERSION}" "${GITHUB_SHA}" "latest"; do
            # ECR_TAGS+=(--tag "${ECR_REPO}/datastax/cass-operator:${t}")
            # ECR_UBI_TAGS+=(--tag "${ECR_REPO}/datastax/cass-operator:${t}-ubi")

            GH_TAGS+=(--tag "docker.pkg.github.com/${{ github.repository_owner }}/cass-operator/operator:${t}")
            GH_UBI_TAGS+=(--tag "docker.pkg.github.com/${{ github.repository_owner }}/cass-operator/operator:${t}-ubi")
            GH_ARM64_TAGS+=(--tag "docker.pkg.github.com/${{ github.repository_owner }}/cass-operator/operator:${t}-arm64")
          done

          LABELS=(
            --label "release=$FULL_VERSION"
            --label "org.label-schema.schema-version=1.0"
            --label "org.label-schema.vcs-ref=$GITHUB_SHA"
            --label "org.label-schema.vcs-url=$GITHUB_REPO_URL"
            --label "org.label-schema.version=$VERSION"
          )

          COMMON_ARGS=(
            "${LABELS[@]}"
            --file operator/docker/base/Dockerfile
            --cache-from "type=local,src=/tmp/.buildx-cache"
            --cache-to "type=local,dest=/tmp/.buildx-cache"
          )

          # docker buildx build \
          #   --push \
          #   "${COMMON_ARGS[@]}" \
          #   "${ECR_TAGS[@]}" \
          #   --target cass-operator \
          #   --platform linux/amd64,linux/arm64 \
          #   .

          docker buildx build \
            --load \
            "${COMMON_ARGS[@]}" \
            "${GH_TAGS[@]}" \
            --target cass-operator \
            --platform linux/amd64 \
            .

          docker buildx build \
            --load \
            "${COMMON_ARGS[@]}" \
            "${GH_ARM64_TAGS[@]}" \
            --target cass-operator \
            --platform linux/amd64 \
            .

          TAGS_TO_PUSH=("${GH_ARM64_TAGS[@]}" "${GH_TAGS[@]}")
          echo "Pushing tags: " "${TAGS_TO_PUSH[@]}"
          for ((x=0; x<${#TAGS_TO_PUSH[@]}; x=x+2));
          do
              docker push "${TAGS_TO_PUSH[x]}"
          done
