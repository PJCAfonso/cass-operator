name: Docker Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release_cass_operator:
    name: Release Cass Operator
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Login to ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ECR_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ECR_SECRET }}
        run: $(aws ecr get-login --no-include-email --region us-east-1)
      - name: Publish to Dockerhub
        env:
          ECR_REPO: ${{ secrets.ECR_REPO }}
        run: |
          GITHUB_REPO_URL="https://github.com/${{ github.repository }}"
          GIT_TAG="${GITHUB_REF##*/}"
          VERSION=${GIT_TAG#v} # strip the initial 'v' from the tag to get the version

          DOCKERHUB_REPOSITORY="datastax/cass-config-builder"
          ECR_REPOSITORY="${ECR_REPO}/datastax/cass-operator"

          # Pull the image from ECR so that we can push it to dockerhub.
          # We exploit the fact that we tag docker images in ECR with the
          # git sha.
          docker pull "${ECR_REPOSITORY}:${GITHUB_SHA}"
          docker pull "${ECR_REPOSITORY}:${GITHUB_SHA}-ubi"

          # Get the version label of the ECR image so that we can double
          # check that it makes since for this tag name.
          LABEL_VERSION="$(docker inspect "${ECR_REPOSITORY}:${GITHUB_SHA}" --format='{{index .Config.Labels "org.label-schema.version"}}')"
          LABEL_VERSION_UBI="$(docker inspect "${ECR_REPOSITORY}:${GITHUB_SHA}-ubi" --format='{{index .Config.Labels "org.label-schema.version"}}')"

          # Sanity check. This should never happen.
          if ! [ "$LABEL_VERSION" = "$LABEL_VERSION_UBI" ]; then
            echo "Standard and UBI images were not labeled with the same version"
            exit 1
          fi

          # Ensure the image has a version appropriate for this tag
          # to prevent confusion.
          #
          # There are two checks in the following if-statement. The
          # first handles the case of a standard release where
          # LABEL_VERSION will contain a "-release" suffix that we
          # generally do not include in the tag. The second handles
          # the case of non-standard releases (a release candidate,
          # alpha, etc.) where we _would_ expect to see the relevant
          # suffix in the tag name.
          if ! [ "v${LABEL_VERSION}" = "${GIT_TAG}-release" ] && ! [ "v${LABEL_VERSION}" = "${GIT_TAG}" ]; then
            echo "Git tag $GIT_TAG does not align with version number ${LABEL_VERSION}"
            exit 1
          fi

          # Tag images for DockerHub and push them
          for t in "$VERSION" "latest"; do
            docker tag "${ECR_REPOSITORY}:${GITHUB_SHA}" "${DOCKERHUB_REPOSITORY}:${t}"
            docker push "${DOCKERHUB_REPOSITORY}:${t}"

            docker tag "${ECR_REPOSITORY}:${GITHUB_SHA}-ubi" "${DOCKERHUB_REPOSITORY}:${t}-ubi"
            docker push "${DOCKERHUB_REPOSITORY}:${t}-ubi"
          done
